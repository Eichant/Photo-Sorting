import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import requests
from io import BytesIO
import time

# –ö–ª–∞—Å–∏ CIFAR-10
class_names = [
    '–õ—ñ—Ç–∞–∫', '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å', '–ü—Ç–∞—Ö', '–ö—ñ—Ç', '–û–ª–µ–Ω—å',
    '–°–æ–±–∞–∫–∞', '–ñ–∞–±–∞', '–ö—ñ–Ω—å', '–ö–æ—Ä–∞–±–µ–ª—å', '–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞'
]

# API –∫–ª—é—á Unsplash
UNSPLASH_ACCESS_KEY = "rAw_zm1HInsy79usUHCbk6IZu0lXE6sgagoPmE2gZKQ"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
@st.cache_resource
def load_model():
    return tf.keras.models.load_model('cifar10_model.h5')

model = load_model()

# –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
st.markdown("""
<style>
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .animated {
        animation: fadeIn 0.8s ease-out;
    }
    
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4edf5 100%);
        color: #2c3e50;
    }
    
    .stButton>button {
        background: linear-gradient(to right, #4facfe 0%, #00f2fe 100%);
        color: white;
        border-radius: 25px;
        border: none;
        padding: 12px 24px;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
    }
    
    .stFileUploader>div>div>div>div {
        border: 2px dashed #4facfe;
        border-radius: 15px;
        background: rgba(255, 255, 255, 0.7);
    }
    
    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }
    
    .photo-card {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
        transition: all 0.4s ease;
        margin-bottom: 25px;
        background: white;
    }
    
    .photo-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }
    
    .header-text {
        background: linear-gradient(45deg, #4facfe, #00f2fe);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 800;
    }
</style>
""", unsafe_allow_html=True)

st.title("‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ(–∑–∞ —Ç–µ–º–æ—é)")
st.markdown('<p class="header-text">–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</p>', unsafe_allow_html=True)

uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ...", type=["jpg", "jpeg", "png"])

def search_similar_photos(query, per_page=6, page=1):
    """–ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ –Ω–∞ Unsplash –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    url = "https://api.unsplash.com/search/photos"
    headers = {"Authorization": f"Client-ID {UNSPLASH_ACCESS_KEY}"}
    params = {
        "query": query,
        "per_page": per_page,
        "page": page,
        "orientation": "landscape"
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        return [
            {
                "url": photo["urls"]["regular"],
                "small": photo["urls"]["small"],
                "user": photo["user"]["name"],
                "description": photo.get("alt_description", "–ë–µ–∑ –æ–ø–∏—Å—É") or "–ë–µ–∑ –æ–ø–∏—Å—É"
            } 
            for photo in data["results"]
        ]
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ: {str(e)}")
        return []

if uploaded_file is not None:
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–æ–≤–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    if 'prev_uploaded_file' not in st.session_state or st.session_state.prev_uploaded_file != uploaded_file.name:
        st.session_state.similar_photos = []
        st.session_state.page = 1
        st.session_state.prev_uploaded_file = uploaded_file.name
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    st.subheader("üñº –í–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:")
    image = Image.open(uploaded_file)
    st.image(image, caption='–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', width=400, use_container_width='auto')
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    with st.spinner('üîç –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...'):
        img = image.resize((32, 32))
        img_array = np.array(img)
        
        if img_array.shape[-1] == 4:
            img_array = img_array[..., :3]
        
        img_array = img_array.astype('float32') / 255
        img_array = np.expand_dims(img_array, axis=0)
    
    # –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    with st.spinner('ü§ñ –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...'):
        progress_bar = st.progress(0)
        for percent_complete in range(100):
            time.sleep(0.01)
            progress_bar.progress(percent_complete + 1)
        predictions = model.predict(img_array)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—É
    main_class_index = np.argmax(predictions)
    main_class = class_names[main_class_index]
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É:")
    st.markdown(f'<div class="animated"><div class="metric-card">'
                f'<h3>–û—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è</h3><h2 style="color:#4facfe;">{main_class}</h2>'
                f'</div></div>', unsafe_allow_html=True)
    
    # –¢–æ–ø-3 –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    top_k = 3
    top_indices = np.argsort(predictions[0])[::-1][:top_k]
    
    st.write("**–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:**")
    for i in top_indices:
        prob = predictions[0][i]
        progress_value = int(prob * 100)
        color = "#00c853" if i == main_class_index else "#4facfe"
        st.markdown(f'<div class="animated"><div class="metric-card">'
                    f'<h4>{class_names[i]}</h4>'
                    f'<div style="display:flex; align-items:center;">'
                    f'<div style="width:100%; background:#f0f0f0; border-radius:10px; margin-right:10px;">'
                    f'<div style="width:{progress_value}%; background:{color}; height:10px; border-radius:10px;"></div>'
                    f'</div>'
                    f'<span style="font-weight:bold; color:{color};">{prob:.2%}</span>'
                    f'</div></div></div>', unsafe_allow_html=True)
    
    # –ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ
    category_translation = {
        '–õ—ñ—Ç–∞–∫': 'airplane',
        '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å': 'car',
        '–ü—Ç–∞—Ö': 'bird',
        '–ö—ñ—Ç': 'cat',
        '–û–ª–µ–Ω—å': 'deer',
        '–°–æ–±–∞–∫–∞': 'dog',
        '–ñ–∞–±–∞': 'frog',
        '–ö—ñ–Ω—å': 'horse',
        '–ö–æ—Ä–∞–±–µ–ª—å': 'ship',
        '–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞': 'truck'
    }
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if 'page' not in st.session_state:
        st.session_state.page = 1
    if 'similar_photos' not in st.session_state:
        st.session_state.similar_photos = []
    
    # –ü–µ—Ä—à–∏–π –ø–æ—à—É–∫
    if not st.session_state.similar_photos:
        with st.spinner('üåê –®—É–∫–∞—î–º–æ —Å—Ö–æ–∂—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...'):
            progress_bar = st.progress(0)
            for percent_complete in range(100):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)
            st.session_state.similar_photos = search_similar_photos(
                category_translation[main_class],
                per_page=6,
                page=st.session_state.page
            )
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    if st.session_state.similar_photos:
        st.subheader(f"üé® –°—Ö–æ–∂—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({main_class}):")
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑ —á—ñ—Ç–∫–∏–º–∏ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        photos_per_row = 3
        for i in range(0, len(st.session_state.similar_photos), photos_per_row):
            cols = st.columns(photos_per_row)
            row_photos = st.session_state.similar_photos[i:i+photos_per_row]
            
            for col, photo in zip(cols, row_photos):
                with col:
                    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                    st.markdown(f'<div class="animated"><div class="photo-card">', unsafe_allow_html=True)
                    st.image(
                        photo["small"],
                        use_container_width=True
                    )
                    st.markdown(f'<div style="padding:15px;">'
                                f'<p style="font-weight:bold; margin-bottom:5px;">–ê–≤—Ç–æ—Ä: {photo["user"]}</p>'
                                f'<p style="font-size:0.9em; color:#555; margin-bottom:10px;">{photo["description"]}</p>'
                                f'<a href="{photo["url"]}" target="_blank" style="display:inline-block; padding:8px 15px; background:#4facfe; color:white; border-radius:20px; text-decoration:none; font-size:0.9em;">–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª</a>'
                                f'</div></div></div>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ"
        if st.button("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ —Ñ–æ—Ç–æ", key="load_more"):
            st.session_state.page += 1
            with st.spinner('‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ...'):
                new_photos = search_similar_photos(
                    category_translation[main_class],
                    per_page=6,
                    page=st.session_state.page
                )
                if new_photos:
                    st.session_state.similar_photos.extend(new_photos)
                    st.rerun()
                else:
                    st.warning("–ë—ñ–ª—å—à–µ —Ñ–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ö–æ–∂—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

# –î–æ–¥–∞–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É –±—ñ—á–Ω—É –ø–∞–Ω–µ–ª—å
st.sidebar.markdown("## üöÄ –ü—Ä–æ –¥–æ–¥–∞—Ç–æ–∫")
st.sidebar.info("–¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–µ–π—Ä–æ–Ω–Ω—É –º–µ—Ä–µ–∂—É –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ 10 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ö–æ–∂—ñ —Ñ–æ—Ç–æ –∑ Unsplash.")
st.sidebar.markdown("---")
st.sidebar.markdown("### üìä –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ")
st.sidebar.image("training_history.png", caption="–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ", use_container_width=True)
st.sidebar.markdown("---")
st.sidebar.markdown("#### üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó")
st.sidebar.markdown("- TensorFlow –¥–ª—è –º–æ–¥–µ–ª—ñ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è")
st.sidebar.markdown("- Streamlit –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
st.sidebar.markdown("- Unsplash API –¥–ª—è –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å")
st.sidebar.markdown("---")
st.sidebar.markdown("#### üë§ –í–∏–∫–æ–Ω–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç")
st.sidebar.markdown("- –ß–µ—Ä–Ω—è—Ö—ñ–≤—Å—å–∫–∏–π –í–æ–ª–æ–¥–∏–º–∏—Ä")
st.sidebar.markdown("- –°–æ–ø—ñ–ª—å–Ω—è–∫ –ë–æ–≥–¥–∞–Ω")
st.sidebar.markdown("- –ü–æ–≥–æ—Ä—ñ–ª–∏–π –ë–æ—Ä–∏—Å")